{"version":3,"sources":["components/SelectBox.js","components/InfoCard.js","components/Scroll.js","components/Card.js","components/CardComparator.js","planet_pictures.js","App.js","serviceWorker.js","index.js"],"names":["SelectBox","planets","handleSelection","namePlanets","map","planet","idx","key","value","name","onChange","InfoCard","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","className","Scroll","props","style","overflowY","height","children","Card","event","setState","idxCurrPlanet","target","state","this","pics","idxPic","length","Math","floor","random","React","Component","CardComparator","planet_pictures","App","fetch","then","response","json","infoPlanets","results","url","i","src","alt","width","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af8d02de.chunk.js","sourcesContent":["import React from 'react';\n\nconst SelectBox = ({ planets, handleSelection }) => {\n\tconst namePlanets = planets.map((planet, idx) => {\n\t\treturn (\n\t\t\t<option\n\t\t\t\tkey={idx}\n\t\t\t\tvalue={idx}\n\t\t\t>\n\t\t\t{planets[idx].name}\n\t\t\t</option>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<select onChange={handleSelection} >{namePlanets}</select>\n\t\t</div>\n\t);\n}\n\nexport default SelectBox;","import React from 'react';\n\nconst InfoCard = ({ name, rotation_period, orbital_period, diameter, climate, gravity, terrain, surface_water, population }) => {\n\treturn (\n\t\t<div className='tc dib br3 pa3 ma2 bw2 white-90 b'>\n\t\t\t<div>\n\t\t\t\t<p>Name: {name}</p>\n\t\t\t\t<p>Rotation period: {rotation_period} days</p>\n\t\t\t\t<p>Orbital period: {orbital_period} days</p>\n\t\t\t\t<p>Diameter: {diameter} km</p>\n\t\t\t\t<p>Climate: {climate}</p>\n\t\t\t\t<p>Gravity: {gravity}</p>\n\t\t\t\t<p>Terrain: {terrain}</p>\n\t\t\t\t<p>Surface water: {surface_water}</p>\n\t\t\t\t<p>Population: {population} inhabitants</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default InfoCard;","import React from 'react';\n\nconst Scroll = (props) => { //scrollable component that renders its children\n\treturn(\n\t\t<div style={{overflowY: 'scroll', height: '300px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React from 'react';\nimport SelectBox from './SelectBox';\nimport InfoCard from './InfoCard';\nimport Scroll from './Scroll';\n\nclass Card extends React.Component {\n\tconstructor () {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tidxCurrPlanet: 0\n\t\t}\n\t}\n\n\thandleSelection = (event) => {\n    \tthis.setState({ idxCurrPlanet: event.target.value });\n  \t}\n\n\trender () {\n\t\tconst { planets, pics } = this.props;\n\t\tconst { idxCurrPlanet } = this.state;\n\t\tvar idxPic = (planets.length <= pics.length) ? idxCurrPlanet : Math.floor(Math.random() * pics.length);\n\t    if (!planets.length) { //same as (planets.length === 0)\n\t      return <h1>Loading</h1>;\n\t    } else {\n\t\t\treturn (\n\t\t\t\t<div className='bl b--white-90 dib br3 pa4 ma3 grow shadow-5'>\n\t\t\t\t\t<SelectBox\n\t\t\t\t\t\tplanets={planets} \n\t\t\t\t\t\thandleSelection={this.handleSelection} \n\t\t\t\t\t/>\n\t\t\t\t\t<div className='pt4'>\n\t\t\t\t\t\t{pics[idxPic]}\n\t\t\t\t\t</div>\n\t\t            <Scroll>\n\t\t            <InfoCard \n\t\t            \tname={planets[idxCurrPlanet].name} \n\t\t            \trotation_period={planets[idxCurrPlanet].rotation_period} \n\t\t            \torbital_period={planets[idxCurrPlanet].orbital_period}\n\t\t            \tdiameter={planets[idxCurrPlanet].diameter}\n\t\t            \tclimate={planets[idxCurrPlanet].climate}\n\t\t            \tgravity={planets[idxCurrPlanet].gravity}\n\t\t            \tterrain={planets[idxCurrPlanet].terrain}\n\t\t            \tsurface_water={planets[idxCurrPlanet].surface_water}\n\t\t            \tpopulation={planets[idxCurrPlanet].population} \n\t\t        \t/>\n\t\t        \t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardComparator = ({ planets, pics }) => {\n\treturn (\n\t\t<div className='pa4 tracked'>\n\t\t\t<Card planets={planets} pics={pics} />\n\t\t\t<Card planets={planets} pics={pics} />\n\t\t</div>\n\t);\n}\n\nexport default CardComparator;","export const planet_pictures = [\n\t\"https://pluspng.com/img-png/planet-png-hd-space-planet-transparent-background-1000.png\",\n    \"https://pluspng.com/img-png/planet-png-hd-mercury-venus-the-earth-mars-800.png\",\n    \"https://pluspng.com/img-png/planet-png-hd--1049.png\",\n    \"https://pluspng.com/img-png/planet-png-hd-terran1-png-2200.png\",\n    \"https://pluspng.com/img-png/planet-png-hd-ice1-png-2300.png\",\n    \"https://pluspng.com/img-png/planet-png-hd-moon-and-planets-hd-lwp-300.png\",\n    \"https://pluspng.com/img-png/png-jupiter--800.png\",\n    \"https://pluspng.com/img-png/planet-png-hd-planet-by-randell-png-640.png\",\n    \"https://i.ya-webdesign.com/images/fantasy-planet-png-8.png\",\n    \"https://cdn.hipwallpaper.com/i/80/98/B2lmUT.png\",\n    \"https://space-facts.com/wp/wp-content/uploads/uranus-transparent.png\",\n    \"https://lh3.googleusercontent.com/proxy/7-C_k-o0zbwBcGg-LzYwWd6wPuj9A7Ku-eJH5ARB-39hJ-rNbhCeS7dsjuqOCV-BsGQ9iEB29aLxdTGZYtkuUIS7twQATV88eJZ4kvY\"\n];","import React from 'react';\nimport './App.css';\nimport CardComparator from './components/CardComparator';\nimport { planet_pictures } from './planet_pictures';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      planets: [],\n      pics: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://swapi.dev/api/planets/?page=1')\n      .then(response => response.json())\n      .then(infoPlanets => this.setState({planets: infoPlanets.results}))\n    ;\n    this.setState({pics: planet_pictures.map((url, i) => {\n      return (\n        <img src={url} alt=\"Planet\" height=\"200\" width=\"200\" /> \n      );\n    }) });\n  }\n\n  render() {\n    const { planets, pics } = this.state;\n    return (\n      <div className=\"tc\">\n        <header className=\"App-header\">\n          <h1 className=\"f1\">Star Wars</h1>\n          <h2 className=\"f3\">Planet Comparator</h2>\n          <CardComparator planets={planets} pics={pics} />\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}